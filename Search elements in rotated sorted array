//search element in rotated sorted array

//check for the sorted portion of the array/vector
//apply binary search only in those parts ..if target is present adjus low and high in that range only otherwise shift the high before mid an repeat the process

#include<bits/stdc++.h>
using namespace std;

int rot_search(vector<int> v,int target,int n)
{
    int low=0,heigh=n-1;
    
    while(low<=heigh)
    {
        int mid= low + (heigh - low) / 2;  //important to control overflow issues
        
        if(v[mid]==target)
        {
            return mid;
        }
        
        if(v[low]<=v[mid])
        {
            if(target>=v[low] && target<=v[mid])
            {
                heigh=mid-1;
                
            }
            else
            {
                low=mid+1;
            }
        }
        else
        {
            if(target<=v[heigh] && target>=v[mid])
            {
                low=mid+1;
            }
            else
            {
                heigh=mid-1;
            }
            
        }
        
        
    }
    
    return -1;
}

int main()
{
    int n;
    cin>>n;
    
    vector<int> v;
    
    for(int i=0;i<n;i++)
    {
        int x;
        cin>>x;
        
        v.push_back(x);
        
    }
    
    int target;
    cin>>target;
    
    int t=rot_search(v,target,n);
    
    cout<<t;
    
    return 0;
}


