//find peak element in the given array/vector using binary search
//check for elements in both sides of mid to chec if portion is increasing or decreasing 
//none of the element is increasing
//1 peak only if either or both of the sides of mid are more than mid
// multiple mids if either the above condition is true follow bove or if both sides of mid are less than either shift l to right or r to left peak can be achieved by both ways

class Solution
{
    public:
    int peakElement(int arr[], int n)
    {
       // Your code here
       if(n>2)
       {
           int l=0,r=n-1;
        //suppose atleast 1 peak exists 
          if(arr[0]>=arr[1])
           {
            return 0;
           }
        
          if(arr[n-1]>=arr[n-2])
           {
            return n-1;
           }
        
         while(l<=r)
        {
           int mid=(l+r)/2;
           
           
             if(arr[mid]>=arr[mid+1] && arr[mid]>=arr[mid-1])
             {
               return mid;
             }
             
            //  if(arr[mid]<arr[mid+1] && arr[mid]<arr[mid-1])
            //  {
            //      l=mid+1;
            //  }
           
             if(arr[mid]>arr[mid+1])
             {
               r=mid-1;
              }
             else if(arr[mid]>arr[mid-1] )
              {
               l=mid+1;  
               }
               else if(arr[mid]<arr[mid-1] || arr[mid]<arr[mid+1])
               {
                   l=mid+1;
               }
           }
        
        
       }
       else if(n==2)
       {
           if(arr[0]>=arr[1])
           {
               return 0;
           }
           else
           {
               return 1;
           }
       }
       else if(n==1)
       {
           return 0;
       }
       
       return -1;
        
       
    }
};
